;;
;; Header files for RestakingFactory
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $StakingMasterData$_store
builder $StakingMasterData$_store(builder build_0, (slice, slice, slice, slice) v) inline;

;; $StakingMasterData$_store_cell
cell $StakingMasterData$_store_cell((slice, slice, slice, slice) v) inline;

;; $StakingMasterData$_load
(slice, ((slice, slice, slice, slice))) $StakingMasterData$_load(slice sc_0) inline;

;; $StakingMasterData$_as_optional
tuple $StakingMasterData$_as_optional((slice, slice, slice, slice) v) inline;

;; $StakingMasterData$_load_opt
tuple $StakingMasterData$_load_opt(cell cl) inline;

;; $DeployReStakingMaster$_load
(slice, ((int, (slice, slice, slice, slice)))) $DeployReStakingMaster$_load(slice sc_0) inline;

;; $RestakingFactory$_store
builder $RestakingFactory$_store(builder build_0, (int, slice, cell) v) inline;

;; $RestakingFactory$_load
(slice, ((int, slice, cell))) $RestakingFactory$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StakingMasterData$_not_null
((slice, slice, slice, slice)) $StakingMasterData$_not_null(tuple v) inline;

;; $StakingMasterData$_to_tuple
tuple $StakingMasterData$_to_tuple(((slice, slice, slice, slice)) v) inline;

;; $StakingMasterData$_to_opt_tuple
tuple $StakingMasterData$_to_opt_tuple(tuple v) inline;

;; $StakingMasterData$_to_opt_external
tuple $StakingMasterData$_to_opt_external(tuple v) inline;

;; $StakingMasterTemplate$init$_store
builder $StakingMasterTemplate$init$_store(builder build_0, (slice) v) inline;

;; $RestakingFactory$_contract_init
(int, slice, cell) $RestakingFactory$_contract_init() impure inline_ref;

;; $RestakingFactory$_contract_load
(int, slice, cell) $RestakingFactory$_contract_load() impure inline_ref;

;; $RestakingFactory$_contract_store
() $RestakingFactory$_contract_store((int, slice, cell) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $StakingMasterTemplate$_init_child
(cell, cell) $StakingMasterTemplate$_init_child(cell sys', slice $owner) inline_ref;

;; $RestakingFactory$_fun_index
((int, slice, cell), int) $RestakingFactory$_fun_index((int, slice, cell) $self) impure inline_ref;

;; $RestakingFactory$_fun_master
((int, slice, cell), tuple) $RestakingFactory$_fun_master((int, slice, cell) $self, slice $jettonMaster) impure inline_ref;

;; $RestakingFactory$_fun_forward
((int, slice, cell), ()) $RestakingFactory$_fun_forward((int, slice, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $RestakingFactory$_fun_reply
((int, slice, cell), ()) $RestakingFactory$_fun_reply((int, slice, cell) $self, cell $body) impure inline;

;; $RestakingFactory$_fun_notify
((int, slice, cell), ()) $RestakingFactory$_fun_notify((int, slice, cell) $self, cell $body) impure inline;

;; $RestakingFactory$_fun_requireOwner
((int, slice, cell), ()) $RestakingFactory$_fun_requireOwner((int, slice, cell) $self) impure inline_ref;

;; $RestakingFactory$_fun_owner
((int, slice, cell), slice) $RestakingFactory$_fun_owner((int, slice, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body_code_data(slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;
