;;
;; Header files for StakingWalletTemplate
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_string_builder_append_not_mut
(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $StakeInternal$_load
(slice, ((int, slice, int, slice, int, cell))) $StakeInternal$_load(slice sc_0) inline_ref;

;; $UnStake$_load
(slice, ((int, int, int, slice, cell))) $UnStake$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int, int, int, int, slice, slice, cell))) $Withdraw$_load(slice sc_0) inline_ref;

;; $WithdrawInternal$_store
builder $WithdrawInternal$_store(builder build_0, (int, int, int, int, int, slice, slice, slice, cell) v) inline_ref;

;; $WithdrawInternal$_store_cell
cell $WithdrawInternal$_store_cell((int, int, int, int, int, slice, slice, slice, cell) v) inline;

;; $Redeposit$_load
(slice, ((int, int, int, cell))) $Redeposit$_load(slice sc_0) inline;

;; $StakeNotification$_store
builder $StakeNotification$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $StakeNotification$_store_cell
cell $StakeNotification$_store_cell((int, int, slice, cell) v) inline;

;; $StakedJettonInfo$_store
builder $StakedJettonInfo$_store(builder build_0, (int, int, int) v) inline;

;; $StakedJettonInfo$_store_cell
cell $StakedJettonInfo$_store_cell((int, int, int) v) inline;

;; $StakedJettonInfo$_load
(slice, ((int, int, int))) $StakedJettonInfo$_load(slice sc_0) inline;

;; $StakedJettonInfo$_as_optional
tuple $StakedJettonInfo$_as_optional((int, int, int) v) inline;

;; $StakedJettonInfo$_load_opt
tuple $StakedJettonInfo$_load_opt(cell cl) inline;

;; $PendingJettonInfo$_store
builder $PendingJettonInfo$_store(builder build_0, (int, int, int, int) v) inline;

;; $PendingJettonInfo$_store_cell
cell $PendingJettonInfo$_store_cell((int, int, int, int) v) inline;

;; $PendingJettonInfo$_load
(slice, ((int, int, int, int))) $PendingJettonInfo$_load(slice sc_0) inline;

;; $PendingJettonInfo$_as_optional
tuple $PendingJettonInfo$_as_optional((int, int, int, int) v) inline;

;; $PendingJettonInfo$_load_opt
tuple $PendingJettonInfo$_load_opt(cell cl) inline;

;; $StakedToPending$_store
builder $StakedToPending$_store(builder build_0, (int, int) v) inline;

;; $StakedToPending$_store_cell
cell $StakedToPending$_store_cell((int, int) v) inline;

;; $PendingToStaked$_store
builder $PendingToStaked$_store(builder build_0, (int, int) v) inline;

;; $PendingToStaked$_store_cell
cell $PendingToStaked$_store_cell((int, int) v) inline;

;; $SetUnstakeThreshold$_load
(slice, ((int, int))) $SetUnstakeThreshold$_load(slice sc_0) inline;

;; $JettonExcesses$_store
builder $JettonExcesses$_store(builder build_0, (int) v) inline;

;; $JettonExcesses$_store_cell
cell $JettonExcesses$_store_cell((int) v) inline;

;; $JettonExcesses$_load
(slice, ((int))) $JettonExcesses$_load(slice sc_0) inline;

;; $SetStaticTaxFee$_load
(slice, ((int))) $SetStaticTaxFee$_load(slice sc_0) inline;

;; $StakingWalletTemplate$_store
builder $StakingWalletTemplate$_store(builder build_0, (slice, slice, int, int, int, int, cell, cell) v) inline;

;; $StakingWalletTemplate$_load
(slice, ((slice, slice, int, int, int, int, cell, cell))) $StakingWalletTemplate$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StakedJettonInfo$_get_jettonAmount
_ $StakedJettonInfo$_get_jettonAmount((int, int, int) v) inline;

;; $StakedJettonInfo$_get_stakeTime
_ $StakedJettonInfo$_get_stakeTime((int, int, int) v) inline;

;; $StakedJettonInfo$_get_stakeIndex
_ $StakedJettonInfo$_get_stakeIndex((int, int, int) v) inline;

;; $StakedJettonInfo$_not_null
((int, int, int)) $StakedJettonInfo$_not_null(tuple v) inline;

;; $PendingJettonInfo$_get_jettonAmount
_ $PendingJettonInfo$_get_jettonAmount((int, int, int, int) v) inline;

;; $PendingJettonInfo$_get_stakeIndex
_ $PendingJettonInfo$_get_stakeIndex((int, int, int, int) v) inline;

;; $PendingJettonInfo$_get_unstakeTime
_ $PendingJettonInfo$_get_unstakeTime((int, int, int, int) v) inline;

;; $PendingJettonInfo$_not_null
((int, int, int, int)) $PendingJettonInfo$_not_null(tuple v) inline;

;; $StakedInfo$_to_external
(cell, cell) $StakedInfo$_to_external(((cell, cell)) v) inline;

;; $StakingWalletTemplate$init$_load
(slice, ((slice, slice))) $StakingWalletTemplate$init$_load(slice sc_0) inline;

;; $StakingWalletTemplate$_contract_init
(slice, slice, int, int, int, int, cell, cell) $StakingWalletTemplate$_contract_init(slice $master, slice $owner) impure inline_ref;

;; $StakingWalletTemplate$_contract_load
(slice, slice, int, int, int, int, cell, cell) $StakingWalletTemplate$_contract_load() impure inline_ref;

;; $StakingWalletTemplate$_contract_store
() $StakingWalletTemplate$_contract_store((slice, slice, int, int, int, int, cell, cell) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $StakingWalletTemplate$_fun_forward
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_forward((slice, slice, int, int, int, int, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $StakingWalletTemplate$_fun_reply
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_reply((slice, slice, int, int, int, int, cell, cell) $self, cell $body) impure inline;

;; $StakingWalletTemplate$_fun_notify
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_notify((slice, slice, int, int, int, int, cell, cell) $self, cell $body) impure inline;

;; $StakedInfo$_constructor_stakedJettons_pendingJettons
((cell, cell)) $StakedInfo$_constructor_stakedJettons_pendingJettons(cell $stakedJettons, cell $pendingJettons) inline;

;; $StakingWalletTemplate$_fun_getStakedInfo
((slice, slice, int, int, int, int, cell, cell), (cell, cell)) $StakingWalletTemplate$_fun_getStakedInfo((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakingWalletTemplate$_fun_stakedInfo
((slice, slice, int, int, int, int, cell, cell), (cell, cell)) $StakingWalletTemplate$_fun_stakedInfo((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakingWalletTemplate$_fun_getUnstakeThreshold
((slice, slice, int, int, int, int, cell, cell), int) $StakingWalletTemplate$_fun_getUnstakeThreshold((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakedJettonInfo$_constructor_jettonAmount_stakeIndex_stakeTime
((int, int, int)) $StakedJettonInfo$_constructor_jettonAmount_stakeIndex_stakeTime(int $jettonAmount, int $stakeIndex, int $stakeTime) inline;

;; $SendParameters$_constructor_to_bounce_value_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline;

;; $StakeNotification$_constructor_queryId_jettonAmount_jettonWallet_forwardPayload
((int, int, slice, cell)) $StakeNotification$_constructor_queryId_jettonAmount_jettonWallet_forwardPayload(int $queryId, int $jettonAmount, slice $jettonWallet, cell $forwardPayload) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $JettonExcesses$_constructor_query_id
((int)) $JettonExcesses$_constructor_query_id(int $query_id) inline;

;; $StakingWalletTemplate$_fun_reserveValue
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_reserveValue((slice, slice, int, int, int, int, cell, cell) $self, int $delta) impure inline_ref;

;; $StakingWalletTemplate$_fun_receiveStakeInternal
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveStakeInternal((slice, slice, int, int, int, int, cell, cell) $self, (int, slice, int, slice, int, cell) $msg) impure inline_ref;

;; $PendingJettonInfo$_constructor_jettonAmount_stakeTime_stakeIndex_unstakeTime
((int, int, int, int)) $PendingJettonInfo$_constructor_jettonAmount_stakeTime_stakeIndex_unstakeTime(int $jettonAmount, int $stakeTime, int $stakeIndex, int $unstakeTime) inline;

;; $StakedToPending$_constructor_jettonAmount_stakeIndex
((int, int)) $StakedToPending$_constructor_jettonAmount_stakeIndex(int $jettonAmount, int $stakeIndex) inline;

;; $StakingWalletTemplate$_fun_receiveUnstake
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveUnstake((slice, slice, int, int, int, int, cell, cell) $self, (int, int, int, slice, cell) $msg) impure inline_ref;

;; $StakedJettonInfo$_constructor_jettonAmount_stakeTime_stakeIndex
((int, int, int)) $StakedJettonInfo$_constructor_jettonAmount_stakeTime_stakeIndex(int $jettonAmount, int $stakeTime, int $stakeIndex) inline;

;; $PendingToStaked$_constructor_jettonAmount_stakeIndex
((int, int)) $PendingToStaked$_constructor_jettonAmount_stakeIndex(int $jettonAmount, int $stakeIndex) inline;

;; $StakingWalletTemplate$_fun_receiveReDeposit
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveReDeposit((slice, slice, int, int, int, int, cell, cell) $self, (int, int, int, cell) $msg) impure inline_ref;

;; $WithdrawInternal$_constructor_queryId_jettonAmount_forwardAmount_tonAmount_forwardPayload_jettonWallet_destination_stakeIndex_responseDestination
((int, int, int, int, int, slice, slice, slice, cell)) $WithdrawInternal$_constructor_queryId_jettonAmount_forwardAmount_tonAmount_forwardPayload_jettonWallet_destination_stakeIndex_responseDestination(int $queryId, int $jettonAmount, int $forwardAmount, int $tonAmount, cell $forwardPayload, slice $jettonWallet, slice $destination, int $stakeIndex, slice $responseDestination) inline;

;; $StakingWalletTemplate$_fun_receiveWithdraw
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveWithdraw((slice, slice, int, int, int, int, cell, cell) $self, (int, int, int, int, slice, slice, cell) $msg) impure inline_ref;

;; $StakingWalletTemplate$_fun_receiveExcesses
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveExcesses((slice, slice, int, int, int, int, cell, cell) $self, (int) $msg) impure inline_ref;

;; $StakingWalletTemplate$_fun_unstakeThreshold
((slice, slice, int, int, int, int, cell, cell), int) $StakingWalletTemplate$_fun_unstakeThreshold((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakingWalletTemplate$_fun_staticTaxFee
((slice, slice, int, int, int, int, cell, cell), int) $StakingWalletTemplate$_fun_staticTaxFee((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakingWalletTemplate$_fun_receiveSetStaticTaxFee
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_receiveSetStaticTaxFee((slice, slice, int, int, int, int, cell, cell) $self, (int) $msg) impure inline_ref;

;; $StakingWalletTemplate$_fun_requireOwner
((slice, slice, int, int, int, int, cell, cell), ()) $StakingWalletTemplate$_fun_requireOwner((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $StakingWalletTemplate$_fun_owner
((slice, slice, int, int, int, int, cell, cell), slice) $StakingWalletTemplate$_fun_owner((slice, slice, int, int, int, int, cell, cell) $self) impure inline_ref;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
