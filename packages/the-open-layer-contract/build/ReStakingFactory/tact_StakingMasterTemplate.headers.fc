;;
;; Header files for StakingMasterTemplate
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_crc16
(slice) __tact_crc16(slice data) inline_ref;

;; __tact_base64_encode
(slice) __tact_base64_encode(slice data) inline_ref;

;; __tact_address_to_user_friendly
(slice) __tact_address_to_user_friendly(slice address) inline_ref;

;; __tact_debug_address
() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2) impure inline_ref;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_string_builder_append_not_mut
(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $StakeInternal$_store
builder $StakeInternal$_store(builder build_0, (int, slice, int, slice, int, cell) v) inline_ref;

;; $StakeInternal$_store_cell
cell $StakeInternal$_store_cell((int, slice, int, slice, int, cell) v) inline;

;; $WithdrawInternal$_load
(slice, ((int, int, int, int, int, slice, slice, slice, cell))) $WithdrawInternal$_load(slice sc_0) inline_ref;

;; $StakeReleaseNotification$_store
builder $StakeReleaseNotification$_store(builder build_0, (int, int, int, slice, cell) v) inline;

;; $StakeReleaseNotification$_store_cell
cell $StakeReleaseNotification$_store_cell((int, int, int, slice, cell) v) inline;

;; $StakeJetton$_load
(slice, ((int, slice, int, cell))) $StakeJetton$_load(slice sc_0) inline;

;; $StakeJetton$_load_not_mut
((int, slice, int, cell)) $StakeJetton$_load_not_mut(slice sc_0) inline;

;; $JettonTransfer$_store
builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, cell) v) inline_ref;

;; $JettonTransfer$_store_cell
cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, cell) v) inline;

;; $JettonTransferNotification$_load
(slice, ((int, int, slice, cell))) $JettonTransferNotification$_load(slice sc_0) inline;

;; $JettonExcesses$_store
builder $JettonExcesses$_store(builder build_0, (int) v) inline;

;; $JettonExcesses$_store_cell
cell $JettonExcesses$_store_cell((int) v) inline;

;; $SetStaticTaxFee$_load
(slice, ((int))) $SetStaticTaxFee$_load(slice sc_0) inline;

;; $StakingMasterTemplate$_store
builder $StakingMasterTemplate$_store(builder build_0, (slice, int, int) v) inline;

;; $StakingMasterTemplate$_load
(slice, ((slice, int, int))) $StakingMasterTemplate$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StakingWalletTemplate$init$_store
builder $StakingWalletTemplate$init$_store(builder build_0, (slice, slice) v) inline;

;; $StakingMasterTemplate$init$_load
(slice, ((slice))) $StakingMasterTemplate$init$_load(slice sc_0) inline;

;; $StakingMasterTemplate$_contract_init
(slice, int, int) $StakingMasterTemplate$_contract_init(slice $owner) impure inline_ref;

;; $StakingMasterTemplate$_contract_load
(slice, int, int) $StakingMasterTemplate$_contract_load() impure inline_ref;

;; $StakingMasterTemplate$_contract_store
() $StakingMasterTemplate$_contract_store((slice, int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $StakingWalletTemplate$_init_child
(cell, cell) $StakingWalletTemplate$_init_child(cell sys', slice $master, slice $owner) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $SendParameters$_constructor_to_bounce_value_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $JettonExcesses$_constructor_query_id
((int)) $JettonExcesses$_constructor_query_id(int $query_id) inline;

;; $StakingMasterTemplate$_fun_getUserWallet
((slice, int, int), (cell, cell)) $StakingMasterTemplate$_fun_getUserWallet((slice, int, int) $self, slice $owner) impure inline;

;; $StakingMasterTemplate$_fun_forward
((slice, int, int), ()) $StakingMasterTemplate$_fun_forward((slice, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $StakingMasterTemplate$_fun_reply
((slice, int, int), ()) $StakingMasterTemplate$_fun_reply((slice, int, int) $self, cell $body) impure inline;

;; $StakingMasterTemplate$_fun_notify
((slice, int, int), ()) $StakingMasterTemplate$_fun_notify((slice, int, int) $self, cell $body) impure inline;

;; $StakingMasterTemplate$_fun_userWallet
((slice, int, int), slice) $StakingMasterTemplate$_fun_userWallet((slice, int, int) $self, slice $owner) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body_data_code
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body_data_code(slice $to, int $bounce, int $value, int $mode, cell $body, cell $data, cell $code) inline;

;; $StakeInternal$_constructor_queryId_jettonWallet_jettonAmount_responseDestination_forwardAmount_forwardPayload
((int, slice, int, slice, int, cell)) $StakeInternal$_constructor_queryId_jettonWallet_jettonAmount_responseDestination_forwardAmount_forwardPayload(int $queryId, slice $jettonWallet, int $jettonAmount, slice $responseDestination, int $forwardAmount, cell $forwardPayload) inline;

;; $StakingMasterTemplate$_fun_reserveValue
((slice, int, int), ()) $StakingMasterTemplate$_fun_reserveValue((slice, int, int) $self, int $delta) impure inline_ref;

;; $StakingMasterTemplate$_fun_receiveTransferNotification
((slice, int, int), ()) $StakingMasterTemplate$_fun_receiveTransferNotification((slice, int, int) $self, (int, int, slice, cell) $msg) impure inline_ref;

;; $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, cell)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, cell $forward_payload) inline;

;; $StakeReleaseNotification$_constructor_queryId_amount_stakeIndex_destination_forwardPayload
((int, int, int, slice, cell)) $StakeReleaseNotification$_constructor_queryId_amount_stakeIndex_destination_forwardPayload(int $queryId, int $amount, int $stakeIndex, slice $destination, cell $forwardPayload) inline;

;; $StakingMasterTemplate$_fun_receiveWithdrawInternal
((slice, int, int), ()) $StakingMasterTemplate$_fun_receiveWithdrawInternal((slice, int, int) $self, (int, int, int, int, int, slice, slice, slice, cell) $msg) impure inline_ref;

;; $StakingMasterTemplate$_fun_userWalletAddress
((slice, int, int), slice) $StakingMasterTemplate$_fun_userWalletAddress((slice, int, int) $self, slice $owner) impure inline_ref;

;; $StakingMasterTemplate$_fun_staticTaxFee
((slice, int, int), int) $StakingMasterTemplate$_fun_staticTaxFee((slice, int, int) $self) impure inline_ref;

;; $StakingMasterTemplate$_fun_receiveSetStaticTaxFee
((slice, int, int), ()) $StakingMasterTemplate$_fun_receiveSetStaticTaxFee((slice, int, int) $self, (int) $msg) impure inline_ref;

;; $StakingMasterTemplate$_fun_requireOwner
((slice, int, int), ()) $StakingMasterTemplate$_fun_requireOwner((slice, int, int) $self) impure inline_ref;

;; $StakingMasterTemplate$_fun_owner
((slice, int, int), slice) $StakingMasterTemplate$_fun_owner((slice, int, int) $self) impure inline_ref;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
