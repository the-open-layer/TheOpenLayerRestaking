global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) impure inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2) impure asm """
    STRDUMP DROP STRDUMP DROP STRDUMP DROP
""";

(slice) __tact_preload_offset(slice s, int offset, int bits) asm """
    SDSUBSTR
""";

(slice) __tact_crc16(slice data) inline_ref {
    slice new_data = begin_cell()
        .store_slice(data)
        .store_slice("0000"s)
    .end_cell().begin_parse();
    int reg = 0;
    while (~ new_data.slice_data_empty?()) {
        int byte = new_data~load_uint(8);
        int mask = 0x80;
        while (mask > 0) {
            reg <<= 1;
            if (byte & mask) {
                reg += 1;
            }
            mask >>= 1;
            if (reg > 0xffff) {
                reg &= 0xffff;
                reg ^= 0x1021;
            }
        }
    }
    (int q, int r) = divmod(reg, 256);
    return begin_cell()
        .store_uint(q, 8)
        .store_uint(r, 8)
    .end_cell().begin_parse();
}

(slice) __tact_base64_encode(slice data) inline_ref {
    slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
    builder res = begin_cell();
    
    while (data.slice_bits() >= 24) {
        (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));
    
        int n = (bs1 << 16) | (bs2 << 8) | bs3;
    
        res = res
            .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
    }
    
    return res.end_cell().begin_parse();
}

(slice) __tact_address_to_user_friendly(slice address) inline_ref {
    (int wc, int hash) = address.parse_std_addr();
    
    slice user_friendly_address = begin_cell()
        .store_slice("11"s)
        .store_uint((wc + 0x100) % 0x100, 8)
        .store_uint(hash, 256)
    .end_cell().begin_parse();
    
    slice checksum = __tact_crc16(user_friendly_address);
    slice user_friendly_address_with_checksum = begin_cell()
        .store_slice(user_friendly_address)
        .store_slice(checksum)
    .end_cell().begin_parse();
    
    return __tact_base64_encode(user_friendly_address_with_checksum);
}

() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2) impure inline_ref {
    __tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder __tact_store_bool(builder b, int v) inline {
    return b.store_int(v, 1);
}

int __tact_slice_eq_bits(slice a, slice b) inline {
    return equal_slices_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);
    
    while((sliceBits > 0) | (sliceRefs > 0)) {
    
        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;
    
        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }
    
        ;; Update builders
        builders = cons(b, tail);
    
        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }
    
    return ((builders), ());
}

(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc) inline_ref {
    builders~__tact_string_builder_append(sc);
    return builders;
}

slice __tact_int_to_string(int src) inline_ref {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);
    
        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);
    
        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_max(int $x, int $y) impure asm """
    MAX
""";

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

int $global_nativeSendMessageReturnForwardFee(cell $msg, int $mode) impure asm """
    SENDMSG
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(builder $self, cell $cell) impure asm($cell $self) """
    STREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = $global_beginCell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = $Builder$_fun_storeCoins($b, $params'value);
    $b = store_int($b, 0, 105);
    if (( ((~ null?($params'code))) ? (true) : ((~ null?($params'data))) )) {
        $b = __tact_store_bool($b, true);
        builder $bc = $global_beginCell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = $Builder$_fun_storeRef($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = $Builder$_fun_storeRef($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = $Builder$_fun_storeRef($b, $Builder$_fun_endCell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = $Builder$_fun_storeRef($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = $Builder$_fun_endCell($b);
    return $global_nativeSendMessageReturnForwardFee($c, $params'mode);
}

cell $String$_fun_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

((slice, int, int), ()) $StakingMasterTemplate$_fun_forward((slice, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'owner, $self'staticTax, $self'lockedValue)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'owner, $self'staticTax, $self'lockedValue), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'owner, $self'staticTax, $self'lockedValue), ());
}

((slice, int, int), ()) $StakingMasterTemplate$_fun_reply((slice, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'staticTax, $self'lockedValue)) = $self;
    ($self'owner, $self'staticTax, $self'lockedValue)~$StakingMasterTemplate$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return (($self'owner, $self'staticTax, $self'lockedValue), ());
}

((slice, int, int), ()) $StakingMasterTemplate$_fun_notify((slice, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'staticTax, $self'lockedValue)) = $self;
    ($self'owner, $self'staticTax, $self'lockedValue)~$StakingMasterTemplate$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'owner, $self'staticTax, $self'lockedValue), ());
}